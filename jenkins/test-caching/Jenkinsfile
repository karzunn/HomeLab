pipeline {
    agent any

    environment {
        CACHE_VOLUME = 'my-cache-volume'
        DEPS_EXIST = 'false'
    }

    stages {
        stage('Check Cache') {
            steps {
                script {
                    def img = docker.build('my-image', 'jenkins/test-caching')

                    img.inside("-v ${env.CACHE_VOLUME}:/cache") {
                        def exists = sh(
                            script: '[ -f /cache/deps.txt ] && echo "true" || echo "false"',
                            returnStdout: true
                        ).trim()

                        env.DEPS_EXIST = exists
                        echo "üîç deps.txt exists: ${env.DEPS_EXIST}"
                    }
                }
            }
        }

        stage('Install Dependencies (if needed)') {
            when {
                expression { return env.DEPS_EXIST == 'false' }
            }
            steps {
                script {
                    def img = docker.build('my-image', 'jenkins/test-caching')

                    img.inside("-v ${env.CACHE_VOLUME}:/cache --user=$(id -u):$(id -g)") {
                        echo "üì¶ Generating dependencies..."
                        sh '''
                            echo "libfoo-1.2.3" > /cache/deps.txt
                            echo "libbar-4.5.6" >> /cache/deps.txt
                            echo "‚úÖ Dependencies written to /cache/deps.txt"
                        '''
                    }
                }
            }
        }

        stage('Use Cached deps.txt') {
            steps {
                script {
                    def img = docker.build('my-image', 'jenkins/test-caching')

                    img.inside("-v ${env.CACHE_VOLUME}:/cache") {
                        echo "üìÑ Using cached dependencies:"
                        sh 'cat /cache/deps.txt || echo "‚ö†Ô∏è No deps.txt found!"'
                    }
                }
            }
        }
    }
}